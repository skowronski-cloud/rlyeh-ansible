---
- name: LXDCT {{ hostvars[item].hv }}/{{ item }} | Check if container works
  delegate_to: '{{ item }}'
  ansible.builtin.raw: whoami
  register: container_check
  changed_when: false
  ignore_errors: true
  ignore_unreachable: true

- name: LXDCT {{ hostvars[item].hv }}/{{ item }} | Deploy Containers
  delegate_to: '{{ hostvars[item].hv }}'
  community.general.lxd_container:
    ignore_volatile_options: true
    name: '{{ item }}'  # with_items from parent playbook
    state: started
    source: '{{ lxd_source }}'  # from group_vars/all.yml
    config:
      limits.cpu: '{{ hostvars[item].cpu }}'
      limits.memory: '{{ hostvars[item].mem }}MB'
      security.nesting: '{{ hostvars[item].lxd_nesting | default ("false") }}'
      security.privileged: '{{ hostvars[item].lxd_privileged | default ("false") }}'
    devices:
      root:
        path: /
        pool: default
        size: '{{ hostvars[item].dsk }}GB'
        type: disk
      eth0:
        type: nic
        nictype: bridged
        parent: '{{ lxd_network.bridge }}'
        ipv4.address: '{{ hostvars[item].ansible_host }}'
        host_name: '{{ item }}'
    wait_for_ipv4_addresses: true
    timeout: 600
  register: lxd_container
  when: ( "unreachable" in container_check )

# - name: LXDCT {{ hostvars[item].hv }}/{{ item }} | Reconfigure Container CPU Limits
#   delegate_to: '{{ hostvars[item].hv }}'
#   ansible.builtin.shell: lxc config get {{ item }} limits.cpu; lxc config set {{ item }} limits.cpu {{ hostvars[item].cpu }}
#   register: lxc_limit_cpu
#   changed_when: lxc_limit_cpu.stdout != str(hostvars[item].cpu)
#   when: ( not ("unreachable" in container_check) )
#
# - name: LXDCT {{ hostvars[item].hv }}/{{ item }} | Reconfigure Container RAM Limits
#   delegate_to: '{{ hostvars[item].hv }}'
#   ansible.builtin.shell: lxc config get {{ item }} limits.memory; lxc config set {{ item }} limits.memory {{ hostvars[item].mem }}
#   register: lxc_limit_mem
#   changed_when: lxc_limit_cpu.stdout != str(hostvars[item].mem)+"MB"
#   when: ( not ("unreachable" in container_check) )

- name: LXDCT {{ hostvars[item].hv }}/{{ item }} | scloud bootstrap
  delegate_to: '{{ hostvars[item].hv }}'
  ansible.builtin.shell: lxc exec {{ item }}  -- sh -c '{{ lookup('file', 'files/scloud_bootstrap.sh') }}'
  when: ( "unreachable" in container_check )

- name: LXDCT | Reset container status
  delegate_to: '{{ item }}'
  meta: clear_host_errors
  when: ( "unreachable" in container_check )

- name: LXDCT {{ hostvars[item].hv }}/{{ item }} | Check if container works
  delegate_to: '{{ item }}'
  ansible.builtin.raw: whoami
  changed_when: false
